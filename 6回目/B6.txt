科目名: プログラミング実習III
課題: B6
番号: 37022493
氏名: 西岡優太
作成: 2023年11月12日

----------------------------------------
[課題 6.1]
次のヒントを参考に, list.c 中の list_print と insert_node とを完成させ, list1test.c が実行できる (上記の動作例のような結果が得られる) ようにせよ.
  
  1.list_node_t はリストを構成するの節点の情報を記憶するための型であり, list.h に定義されている.
    教科書 p. 171 のnode_t と基本的に同じである. 名前が list_node_t となっていることと, データ部のメンバ名が value ではなく val になっていることと, 宣言の書き方が違っているだけである.
  2.void list_print(list_node_t *head_p) は, head_p をヘッダとするリストの表示を行う関数である. 教科書 p. 178 のリスト 6.3 と基本的に同じである.
  3.list_node* insert_node(list_node_t *n, int val) は, ポインタ n が指す節点の直後に値 val を保持する節点を挿入する関数である. 
    教科書 p. 173 のリスト 6.1 と基本的に同じである. 新しい節点を作る部分を関数 create_node として分離していることや, 節点を作るのに失敗した場合の処理が異なるだけである.

[実行結果]

(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % gcc list.c list1test.c -W
(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % ./a.out                  
input = 3
[ 3 ]
input = 5
[ 5 3 ]
input = 4
[ 4 5 3 ]
input = 3
[ 3 4 5 3 ]
input = %     

[感想]
この課題では、リストの表示と挿入を実装した。
挿入の際に気をつけた点として、
    new_node->next = n->next;    
    n->next = new_node;
の順番である。もし、先に2行目を実行してしまうと
次の節点はどこからもポインタされなくなってしまう。
表示に関しては、for文でpのポインタを次の節点のポインタに変えることで実現できた。

----------------------------------------
[課題 6.2]
list.c 中の関数 list_find を完成させ, 下記の list2test.c とリンクして動作確認せよ.

list_node_t* list_find(list_node_t *head_p, int val) は, リスト中に値 val を持つ節点を探し, 見つかればその節点へのポインタを返し, なければ NULL を返す関数である.

list2test.c は, 標準入力から次々に整数値を入力し, その数がリスト中になければリストの先頭に挿入し, もしリスト中にあればその符号を反転させる. 動作例を次に示す.

[実行結果]

(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % gcc list.c list2test.c -W
(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % ./a.out
input = 3
[ 3 ]
input = 5
[ 5 3 ]
input = 4
[ 4 5 3 ]
input = 3
[ 4 5 -3 ]
input = %   

[感想]
今回の課題では、リスト中に同じ要素があるかどうか判定し、もしあれば符号を反転させる関数を実装した。
list_find関数内の処理は、list_printでのfor文から着想を得て、for文内でもし同じ値があった場合、
breakしてその時点でのポインタpを返し、無かったらnullを返すようにした。

----------------------------------------
[課題 6.3]
list.c 中の関数 list_insert_uniq を完成させ, 下記の list3test.c とリンクして動作確認せよ.

list_node_t* list_insert_uniq(list_node_t *head_p, int val) は, list_insert と同様, 値 val を持つ節点をリストの先頭に挿入し挿入した節点へのポインタを返す. 
ただし, 既に同じ値を持つ節点がリスト中にあるときには挿入を行わず, 既にある同じ値を持つ接点へのポインタを返すとする.

基本的にlist_insert と同じだが, 最初に list_find を呼び出して同じ値が存在するかどうかを調べ, 存在しない場合にのみ挿入を行うようにすればよい.

list3test.c は, 標準入力から次々に整数値を入力し, その数がリスト中になければリストの先頭に挿入し, もしリスト中にあれば挿入を行わない. 動作例を次に示す.

input = 3
[ 3 ]
input = 5
[ 5 3 ]
input = 3
[ 5 3 ]
input = 4
[ 4 5 3 ]
input = ^d     (CTRL+d で入力の終了)

[実行結果]

(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % ./a.out                  
input = 3   
[ 3 ]
input = 5
[ 5  3 ]
input = 3
[ 5  3 ]
input = 4
[ 4  5  3 ]
input = %   

[感想]
今回の課題では、すでにリスト内に同じ要素がある場合に挿入をしないようにするlist_insert_uniq関数を実装した。
難易度は高くなく、ポインタpにlist_find関数の返り値を代入し、その値で条件分岐することで実現できた。
同じ値があったときにpをそのまま返すという処理を6-9でも使った。

----------------------------------------
[課題 6.4]
下記の処理を行い, (1)(2)(3) それぞれの処理に要する計算時間を表示するプログラム list4time.c を作成せよ.

(0) 標準入力から正整数 n を入力する.

(1) 乱数を n 個発生させ, それを list_insert_uniq で順次リストに挿入する.

(2) (1)と同じ乱数を n 個発生させ, list_find でそのデータをリスト中に検索する.

(3) (1)と異なる乱数を n 個発生させ, list_find でそのデータをリスト中に検索する.

いろいろな n (例えば n=5000, 10000, 15000, 20000, 25000, … 等) に対して計測を行い, データ１個あたりに必要な平均計算時間が n の増加に対してどのような割合で増加するか調べよ. その理由について考察せよ.

また, 乱数の発生は, 下記 myrand.c の myrand_init() と myrand() を呼び出すことにより行え (list4time.c, list.c, myrand.c をリンクして実行せよ).
  ・最初に myrand_init() を呼び出すと, 以後 myrand() は呼び出す度に異なる整数 (乱数) を返す. n 個の乱数を発生させ, これを (1) に用いよ.
  ・次に, 再度 myrand_init() を呼び出すと, myrand() は (1) と同じ乱数を発生する. n 個の乱数を発生させ, これを (2) に用いよ.
  ・その後, myrand_init() を呼び出さないで myrand() を呼び出すと, (1)(2) とは異なる乱数系列が得られる. これを (3) の乱数として用いよ

[実行結果]

(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % gcc list4time.c list.c myrand.c -W
(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % ./a.out
n=5000
cpu = 0.03946 [sec]
cpu = 0.025716 [sec]
cpu = 0.051098 [sec]

(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % ./a.out
n=10000
cpu = 0.124171 [sec]
cpu = 0.110806 [sec]
cpu = 0.269104 [sec]

(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % ./a.out
n=15000
cpu = 0.264667 [sec]
cpu = 0.238215 [sec]
cpu = 0.466169 [sec]

[感想]
それぞれの処置における時間計算量はO(n^2)である。
n=5000とn=10000の時の時間を比べると、nが2倍になっているのに対して、時間は4倍ほどになっている。
また、n=5000とn=15000で比べても、nが3倍になっているのに対して、時間は約9倍になっている。
そして、myrand_initを実行しなければ、list_findのfor文の処理に余計に時間がかかってしまう(最悪時間計算量は2n^2ほど)ため、
myrand_initを実行したときに比べて処理の時間が2倍ほどかかると推測できる。

----------------------------------------
[課題 6.5]
list.c 中の関数 list_insert_delete_dup を完成させ, 下記の list5test.c とリンクして動作確認せよ.

list_node_t* list_insert_delete_dup(list_node_t *head_p, int val) は, list_insert と同様, 値 val を持つ節点をリストの先頭に挿入しする. 
ただし, 既に同じ値を持つ節点がリスト中にあるときには, リストの先頭への挿入を行わず, さらに, 既にあった同じ値を持つ節点を削除する. 
この関数が返す値は, 挿入した節点がある場合にはその節点へのポインタであり, 挿入しなかった場合にはNULLを返す.

・最初に list_find を呼び出し, 同じ値を持つ節点がリスト中にあるかどうかを判定する.

・もしなければ, list_insert を用いて節点を挿入する.

・もしあれば, 同じ値を持つ節点を削除する.
    ・その値を持つ節点の直前の節点を指すポインタ p を求める.
    ・p に対して remove_node を呼び出して目的の節点を削除する.

[実行結果]

(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % gcc list.c list5test.c -W        
(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % ./a.out                  
input = 3
[ 3 ]
input = 5
[ 5 3 ]
input = 3
[ 5 ]
input = 4
[ 4 5 ]
input = 4
[ 5 ]
input = %  

[感想]
今回の課題では、リストに既に同じ値があった場合挿入を行わず、さらに既にあった同じ値を持つ節点を削除する関数を実装した。
この課題に一番時間をかけてしまったのだが、もし同じ値があった場合にその直前のポインタを探した削除する処理の実装に躓いた。
initialというlist_node_t型のポインタ変数を用意し、for文を使うことでpに直前の節点を指すポインタを求めることができた。
initialが次の節点のポインタに変わる前にpにinitialのポインタを代入するというのがこの課題を解く鍵となった。

----------------------------------------
[課題 6.9]
下に, tree.c, tree.h, tree9test.c を示す. tree.c は二分木の処理を行う関数群の原型, tree.h はそのヘッダファイルである. tree9test.c は, 次の動作例のように, 標準入力から次々に整数を読み込んで二分木に挿入し, 各時点での二分木の内容を表示するプログラムである. ただし, 既に二分木中に同じ値がある場合には, その値の挿入は行わない. また, 表示はデータの昇順に行う.

input = 3
[ 3 ]
input = 5
[ 3 5 ]
input = 3
[ 3 5 ]
input = 4
[ 3 4 5 ]
input = ^d     (CTRL+d で入力の終了)

現状のままでも tree9test.c と tree.c をコンパイル＆リンクすると動作する. しかし,
(a) 二分木中にあるデータを入力すると, それが挿入されてしまう.

(b) 表示がデータの昇順にならない.

という問題がある. この問題が解決するように tree.c を修正せよ. 具体的には次の修正を行え.
(1) (a)の問題が解決するように tree_insert_uniq を修正せよ.

(2) (b)の問題が解決するように tree_print を修正せよ.

[実行結果]

(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % gcc tree.c tree9test.c -W
(base) nishiokayuuta@nishiokayuutanoMacBook-Air 6回目 % ./a.out                  
input = 3
[ 3 ]
input = 5
[ 3 5 ]
input = 3
[ 3 5 ]
input = 4
[ 3 4 5 ]
input = %    

[感想]
この課題では、二分木への値の挿入とその内容を表示する関数を実装した。
ree_insert_uniq関数では、条件を追加し、val == n->dataの時何も動作をしないようにした。
これは6-3でも同じような処理を行ったのですぐにできた。
tree_print関数では、二分木のたどりかたとして中央順を選んだ。
中央順で辿ることで、要素を小さい順に表示させることができた。

----------------------------------------

[課題 B6 の感想]
今回は実装が全体的に難しかったが、リストと二分木の理解が深まった。
データ構造とアルゴリズムの授業で出てきたAVL探索木などの実装も自分でやってみたいと思う。

