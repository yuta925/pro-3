科目名: プログラミング実習III
課題: B11
番号: 311022493
氏名: 西岡優太
作成: 2023年 12月 24日

----------------------------------------
[課題 11.1]

    [List 11.1] は, aaa, bbb, ccc と言う 3 つのクラスについて, コンストラクタ, デストラクタが呼ばれ
    る毎にその旨を表示するようにしたものである. このプログラムを実行し, 結果を分析せよ. (実行結果の各行に対
    して, そのコンストラクタ, デストラクタがプログラム中のどこでどのように呼ばれたか説明せよ.)

    [実行結果]

        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_1.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out
        aaa()
        bbb()
        bbb()
        bbb()
        aaa()
        aaa(3,4)
        ~aaa()
        aaa(7,4)
        ~aaa()
        aaa(7,4)
        ~aaa()
        aaa(7,4)
        ~aaa()
        ~aaa()
        aaa()
        bbb()
        ccc()
        ~ccc()
        ~bbb()
        ~aaa()
        ~bbb()
        ~bbb()
        ~bbb()
        ~aaa()

    [分析]

        18行目         [list 11.1]の8行目でクラスaaa単体の定義時にコンストラクタが呼び出された
        19〜21行目     [list 11.1]の9行目でクラスbbb配列(要素数3)の定義時にコンストラクタが呼び出された
        22行目         [list 11.1]の10行目でnewによってクラスaaaの領域が割り当てられた時にコンストラクタが呼び出された
        23行目         [list 11.1]の12行目でaaa関数の返り値を一時的に保持する変数を作る時にコンストラクタが呼び出された
        24行目         [list 11.1]の12行目で定義した変数にaaa関数の返り値を代入し終えた時にデストラクタが呼び出された
        25〜30行目     [list 11.1]の13~15行目でfor文内で定義しているのでコンストラクトが呼び出された後デストラクタが呼び出された
        31行目         [list 11.1]の10行目で割り当てられたpが消滅する時にデストラクタが呼び出された
        32〜34行目     [list 11.1]の17行目でクラスccc単体の定義時にそのメンバaaaとbbbのコンストラクタも呼び出された
        35〜37行目     [list 11.1]でプログラムの実行がクラスccc単体cの有効範囲から外れたためデストラクタが呼び出された
        38〜40行目     [list 11.1]でプログラムの実行がクラスbbb配列x[3]の有効範囲から外れたためデストラクタが呼び出された
        41行目         [list 11.1]でプログラムの実行がクラスaaa単体aの有効範囲から外れたためデストラクタが呼び出された

    [感想]

        コンストラクタは、クラスのインスタンスが生成された直後に実行されるメンバ関数で、
        デストラクタは、クラスのインスタンスが消える直前に実行されるメンバ関数なので
        呼び出されるタイミングを見極める必要性があると感じた。

----------------------------------------
[課題 11.2]

    trace を実際に使用してみよ. [List 11.6] のプログラムを実行し, 予想と結果を比較せよ

    [予想]

        main begin
        for-loop begin
        add begin
        add end
        for-loop end
        for-loop begin
        add begin
        add end
        for-loop end
        for-loop begin
        add begin
        add end
        for-loop end
        main end

    [実行結果]

        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_2.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out    
        main begin
        for-loop begin
        add begin
        add end
        for-loop end
        for-loop begin
        add begin
        add end
        for-loop end
        for-loop begin
        add begin
        add end
        for-loop end
        main end

    [感想]

        3_1でコンストラクタとデストラクタの呼び出しのタイミングを意識する重要性を理解できたので、
        今回のような実行結果の予測ができた。

----------------------------------------
[課題 11.3]

    Complex に対して, 代入演算, および左辺に右辺の値を足し込む演算 += を定義し, 動作を確認せよ

    [実行結果]

        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_3.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out    
        a=1+2i
        b=3+4i
        a+=bを実行してcに代入
        c=4+6i

    [感想]

        今回はクラスの代入演算について、operator記法を用いて実装した。
        この関数は値を返すのではなく参照を返していることに注意した。

----------------------------------------
[課題 11.4]

    [List 11.7], [List 11.8] のプログラムを実行し, どのような結果になるか確認せよ

    [実行結果]  

        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_4.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out    
        max=5, sp=3, data=(1 300 500 )
        max=5, sp=3, data=(1 300 500 )
        a.out(33013,0x1fbdc4140) malloc: Double free of object 0x157e06b60
        a.out(33013,0x1fbdc4140) malloc: *** set a breakpoint in malloc_error_break to debug
        zsh: abort      ./a.out

    [感想]  

        フリーの重複などのエラーを確認することができた

----------------------------------------
[課題 11.5]

    stack に対する代入関数を定義し, 課題 11.4 のプログラムがきちんと動くようにせよ

    [実行結果]

        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_5.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out    
        max=5, sp=3, data=(1 300 500 )
        max=7, sp=3, data=(1 3 5 )

    [感想]

        デフォルトの代入演算で起こるエラーの解決法を理解し、改善した。
        今回は問題ないのだが、自己代入の際に代入元がフリーされて配列がコピーできない
        といったこともありうることを知った。

----------------------------------------
[課題 11.6]

    [実行結果]

        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_6.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out    
        Complex(3.14,2.26)
        Complex(const Complex&)
        Complex()
        Complex(const Complex&)
        Complex(const Complex&)
        Complex()
        operator=(const Complex& c)
        ∼Complex()
        ∼Complex()
        ∼Complex()
        6.28+4.52i
        ∼Complex()
        ∼Complex()
        ∼Complex()

    [分析]

        168行目         [list 11.17]の46行目でコンストラクタが呼ばれている
        169行目         [list 11.17]の47行目でコピーコンストラクタが呼ばれている
        170行目         [list 11.17]の48行目でコンストラクタが呼ばれている
        171,172行目     [list 11.17]の49行目でx,yの値にそれぞれa,bを代入するためにコンストラクタが呼ばれている
        173行目         [list 11.17]の operator+(Complex a, Complex b) 内で Complex c を定義するときにコンストラクタが呼ばれている
        174行目         [list 11.17]で x + y の結果をzに代入するためにコピーコンストラクタが呼ばれている 
        175~177行目     [list 11.17]で operator+(Complex a, Complex b)が終了する際にa,b,cそれぞれのデストラクタが呼ばれている
        178行目         [list 11.17]の50行目の出力
        179=181行目     [list 11.17]でプログラムが終了したため、x,y,zのデストラクタがそれぞれ呼ばれている
    
    [感想]

        コピーコンストラクタの呼び出されるタイミングをしっかり理解できた。

----------------------------------------
[課題 11.7] 

    [List 11.18] のプログラムでどのようなエラーが出るか確認せよ

    [実行結果]

        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_7.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out    
        max=5, sp=3, data=(0 0 0 )
        max=5, sp=3, data=(0 0 0 )
        max=10, sp=6, data=(1 3 5 2 4 6 )
        a.out(35157,0x1fbdc4140) malloc: Double free of object 0x13d606b60
        a.out(35157,0x1fbdc4140) malloc: *** set a breakpoint in malloc_error_break to debug
        zsh: abort      ./a.out

    [感想]

        11_5で作成したstackでエラーが起きた。

----------------------------------------
[課題 11.8]

    コピーコンストラクタを追加し, [List 11.18] のプログラムが実行できるようにせよ

    [実行結果]
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_8.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out    
        max=5, sp=3, data=(1 3 5 )
        max=5, sp=3, data=(2 4 6 )
        max=10, sp=6, data=(1 3 5 2 4 6 )
    
    [感想]
        コピーコンストラクタを自分で定義することでエラーが解消された。
        plus関数は値引数で値を返しているので、参照渡しをしなければいけないことがわかった。

----------------------------------------
[課題 11.9]

    これまでに作成した Complex, stack の最も新しいバージョンのコンストラクタを11.3.5 の構文を
    用いたものに書き直せ

    [実行結果]

        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_9c.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out     
        Complex(3.14,2.26)
        Complex(const Complex& c)
        Complex()
        Complex(const Complex& c)
        Complex(const Complex& c)
        Complex()
        operator=(const Complex& c)
        ∼Complex()
        ∼Complex()
        ∼Complex()
        6.28+4.52i
        ∼Complex()
        ∼Complex()
        ∼Complex()

        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % g++ 3_9s.cpp
        (base) nishiokayuuta@nishiokayuutanoMacBook-Air 11回目 % ./a.out
        max=5, sp=3, data=(1 3 5 )
        max=5, sp=3, data=(2 4 6 )
        max=10, sp=6, data=(1 3 5 2 4 6 )

    [感想]
        引数付きコンストラクタの新たな書き方を学んだ。
        初期化する場合{}の前に記述し、{}内には初期化以外の動作を記述すれば良いとわかった。

----------------------------------------
[課題 B11 の感想]

    全体的に難易度が高かった。デフォルトのデメリットを感じることができ、
    自力で関数を作らないといけない部分がC++の厄介なところだと思った。
