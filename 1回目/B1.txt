科目名: プログラミング実習III
課題: B1
番号: 37022493
氏名: 西岡 優太
作成: 2023年9月日

----------------------------------------

[課題 1.1]

1〜40までの整数のうち,3の倍数か,いずれかの桁が3であるものを,小さい順に出力するプログラムを作成した 

実行結果は次の通りである. 

  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % gcc -Wall san.c               
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % ./a.out
  3
  6
  9
  12
  13
  15
  18
  21
  23
  24
  27
  30
  31
  32
  33
  34
  35
  36
  37
  38
  39

3の倍数あるいはいずれかの桁が3の倍数である整数を抽出することができた

工夫としては,1〜40の整数を3で割った余りが0、10で割った余りが3、あるいは商が3となるという条件を
満たせばその整数を表示させるようにした

今回は1〜40という整数範囲だったが、3桁になると条件が変わってくるので桁数が増えても3の倍数を抽出できる
ようにしたいと思った。

----------------------------------------

[課題 1.2]

課題 (1-1) で作成したプログラム san.c を実行したときの出力を, テキストファイル out.txt に保存せよ.
次に, 下記のようなファイル san-exp.txt を作成し, out.txt と san-exp.txt の内容が一致することを確かめよ

実行結果は1.1と同じなので省略する

この課題では、./a.out > 出力を保存したいファイル名 で実行結果を保存できることを知ることができた。
1.1の結果をout.txtに保存することができ、diff -w out.txt san-exp.txt をターミナルで打つと差分がないことが分かった。

----------------------------------------

[課題 1.3]

キーボードから n を入力し (1≤n≤99 とする), 1〜n の整数のうち, 3 の倍数か, いずれかの桁が 3 であるものを, 小さい順に出力するプログラム san2.c を作成せよ.
n=77 を入力したときの出力をテキストファイルに保存し, 下記の期待値を保存したファイル san2-exp.txt と内容が一致することを確認せよ.

実行結果は次の通りである

  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % gcc san2.c       
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % ./a.out > out.txt
  nを入力して下さい: 77
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % diff -w out.txt san2-exp.txt
  
  [out.txt]
  3
  6
  9
  12
  13
  15
  18
  21
  23
  24
  27
  30
  31
  32
  33
  34
  35
  36
  37
  38
  39
  42
  43
  45
  48
  51
  53
  54
  57
  60
  63
  66
  69
  72
  73
  75
  
今回の課題では、プログラムはsan.cとさほど変わらないので作成に時間はかからなかったが、
キーボードで入力する時のプロンプトがout.txtに保存されないようにする方法を学べた。
プログラムの出力を二つに分け、データは標準出力、プロンプトやエラーメッセージは標準エラー出力に分類され、
fprintf(stderr, "メッセージ"); と書けば、標準エラー出力と判断されることを知った。

----------------------------------------

[課題 1.4]

標準入力から 4 つの実数 x1, y1, x2, y2 を入力し, 2 点 (x1,y1) と (x2,y2) の距離を標準出力に出力するプログラム dist.c を作成せよ. 
この動作を 3 回繰り返し, 計算結果は小数点以下4桁まで出力するようにせよ.
プログラムが完成したら, 下記の入力に対し, 期待値が出力されることを確認せよ. まず, 手入力と目視で動作を確認した後, 
リダイレクトと diff によって間違いがないことを確認せよ.

実行結果は次の通りである

  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % gcc dist.c                  
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % ./a.out                     
  4つの実数 x1, y1, x2, y2 を入力して下さい: 0 0 1 1
  1.4142
  4つの実数 x1, y1, x2, y2 を入力して下さい: 1 2 4 7
  5.8310
  4つの実数 x1, y1, x2, y2 を入力して下さい: 1.11 2.22 3.33 4.44
  3.1396

  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % ./a.out <dist-in.txt> out.txt
  4つの実数 x1, y1, x2, y2 を入力して下さい: 4つの実数 x1, y1, x2, y2 を入力して下さい: 4つの実数 x1, y1, x2, y2 を入力して下さい: %  
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % diff -w out.txt dist-exp.txt   

プログラムは難しくなく、math.hというヘッダーファイルを取り込んで、平方根を求めるsqrt関数を使って任意の2点の距離を求めることができた。
また、今回の課題では標準入力をリダイレクトによりファイルから供給することができることを知った。
相変わらず、diffによって差分はなかった。

----------------------------------------

[課題 1.5]
標準入力から科目の成績の素点 (0〜100 までの整数) を入力してその GP (grade point; 下表参照) を小数点以下 1 桁で出力する, 
という動作をデータがなくなるまで (scanf が EOF を返すまで) 繰り返し, 最後に GP の平均値を小数点以下3桁で出力するプログラム gpa.c を作成せよ

実行結果は次の通りである

  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % gcc gpa.c
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % ./a.out <gpa-in.txt> out.txt
  科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: 科目の成績の素点 (0〜100 までの整数）を入力して下さい: % 
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % diff -w out.txt gpa-exp.txt 

  [out.txt]
  4.0
  4.0
  4.0
  3.5
  3.5
  3.0
  3.0
  3.0
  2.5
  2.5
  2.0
  2.0
  2.0
  1.5
  1.5
  1.0
  1.0
  1.0
  0.0
  0.0
  0.0
  0.0
  0.0
  0.0
  0.0
  0.0
  1.731

GPという配列を用意し、条件に合わせてint型の変数totalに足して平均を取ることでこのプログラムを作成した。
この課題では標準入力の終了判定を学んだ。EOFはファイルの終わりを意味するので、scanfで読み込んだ値がEOFであれば
breakするという条件式をfor文内に書くことで、点数が一個ずつ入力できた。

----------------------------------------

[課題 1.6]
品物が n 種類あり, i 番目の品物の重さが weight[i] (小数点以下1桁以内の実数) であるとする. 次のようなプログラム weight.c を作成せよ.
  1.まず n を入力する.
  2.次に, weight[0], weight[1], …, weight[n-1] を入力する.
  3.続いて, 品物の番号 (0〜n-1) の系列を入力する (EOF で終了判定する).
  4.3 で入力した品物の重さの合計を出力 (小数点以下1桁まで) する.
ただし, n の上限は 10 とする. プログラムが完成したら, weight-in.txt に対する出力が weight-exp.txt に一致することを確認すること.

実行結果は次の通りである
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % gcc weight.c
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % ./a.out <weight-in.txt> out.txt
  整数nを入力: 整数nを入力: %  
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % diff -w out.txt weight-exp.txt
  
  [out.txt]
  8.8

今回は式の成立を判断するassertを学んだ。
プログラムを書く中で難しかった点は、品物の番号の系列の入力でforをscanfがEOFになるまで回すことで上手く処理ができた。

----------------------------------------

[課題 1.7]
標準入力から英単語 w を入力し, w 中の 'a' 'i', 'u', 'e', 'o' 以外を全て '*' に置き換えて, w を出力するプログラム aiueo.c を作成せよ. 
上記の動作を英単語 "qq" が入力されるまで繰り返し実行するようにせよ.

実行結果は次の通りである

  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % gcc aiueo.c
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % ./a.out <aiueo-in.txt> out.txt
  英単語を入力して下さい (qq で終了): 英単語を入力して下さい (qq で終了): 英単語を入力して下さい (qq で終了): 英単語を入力して下さい (qq で終了): % 

  [out.txt]
  **e*e
  **a**ei
  **o**a**i**

工夫した点としては、a,i,u,e,oのどれでもないという条件でそれに当てはまる英単語を＊に置き換えるようにした。

----------------------------------------

[課題 1.8]
次のような計算を行うプログラム match.c を作成せよ.

  1.整数 k を入力する. (ただし, 1≤k≤10 とする)
  2.k 個の整数 a0, a1, …, ak-1 を入力する.
  3.整数 n を入力する. (ただし, k≤n≤16 とする)
  4.整数 m を入力する. (ただし, 1≤m≤16 とする)
  5.次を m 回繰り返す.
    ・n 個の整数 b0, b1, …, bn-1 入力する.
    ・ある整数 i について
        bi=a0, bi+1=a1, bi+2=a2, …, bi+k-1=ak-1 
      が成り立てば 1 を, そうでなければ 0 を出力し, その後に改行を出力する.

実行結果は次の通りである
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % diff -w out.txt weight-exp.txt
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % gcc match.c
  (base) nishiokayuuta@nishiokayuutanoMacBook-Air 1回目 % ./a.out <match-in.txt> out.txt
  整数kを入力して下さい:整数nを入力して下さい:整数mを入力して下さい:整数kを入力して下さい:% 

  [out.txt]
  1
  0
  1
  1
  0
  1
  0
  1
  0
  0

b[i] == a[0] かつ b[i+1] == a[1]が成り立てばcountを増やし、成り立たなければ0を掛けてcountをリセットするという操作を
繰り返してcount==kになれば1を返し、0ならば0を返すmatch関数を作った。この関数の戻り値をint型の整数resultに格納して表示させるようにした。
この課題を通して得たことは、実行できているか確認するために途中にprint文を挟むことが有効であるということである。

----------------------------------------

[課題 R1 の感想]

R1ではリダイレクトについて学んだ。
入力用ファイルのデータを任意のプログラムに入力し、出力結果を出力ファイルに保存するといった手法が得られた。
入力ファイルのデータが上手く格納されないことがあり困難を極めたが、printf文で逐一確認することでプログラムを
完成させることができた。
